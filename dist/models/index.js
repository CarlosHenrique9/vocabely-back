"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WatchTime = exports.Like = exports.User = exports.Favorite = exports.Episode = exports.Course = exports.Category = void 0;
const Category_1 = require("./Category");
Object.defineProperty(exports, "Category", { enumerable: true, get: function () { return Category_1.Category; } });
const Course_1 = require("./Course");
Object.defineProperty(exports, "Course", { enumerable: true, get: function () { return Course_1.Course; } });
const Episode_1 = require("./Episode");
Object.defineProperty(exports, "Episode", { enumerable: true, get: function () { return Episode_1.Episode; } });
const Favorite_1 = require("./Favorite");
Object.defineProperty(exports, "Favorite", { enumerable: true, get: function () { return Favorite_1.Favorite; } });
const User_1 = require("./User");
Object.defineProperty(exports, "User", { enumerable: true, get: function () { return User_1.User; } });
const Like_1 = require("./Like");
Object.defineProperty(exports, "Like", { enumerable: true, get: function () { return Like_1.Like; } });
const WatchTime_1 = require("./WatchTime");
Object.defineProperty(exports, "WatchTime", { enumerable: true, get: function () { return WatchTime_1.WatchTime; } });
// Configuração das associações
Category_1.Category.hasMany(Course_1.Course, { foreignKey: 'categoryId', as: 'courses' });
Course_1.Course.belongsTo(Category_1.Category, { foreignKey: 'categoryId', as: 'category' });
Course_1.Course.hasMany(Episode_1.Episode, { foreignKey: 'courseId' });
Episode_1.Episode.belongsTo(Course_1.Course, { foreignKey: 'courseId' });
Course_1.Course.belongsToMany(User_1.User, { through: Favorite_1.Favorite, as: 'favorites' });
User_1.User.belongsToMany(Course_1.Course, { through: Favorite_1.Favorite, as: 'favoriteCourses' });
Course_1.Course.belongsToMany(User_1.User, { through: Like_1.Like, as: 'likes' });
User_1.User.belongsToMany(Course_1.Course, { through: Like_1.Like, as: 'likedCourses' });
Episode_1.Episode.belongsToMany(User_1.User, { through: WatchTime_1.WatchTime, as: 'watchTimes' });
User_1.User.belongsToMany(Episode_1.Episode, { through: WatchTime_1.WatchTime, as: 'watchedEpisodes' });
Favorite_1.Favorite.belongsTo(Course_1.Course, { foreignKey: 'courseId' });
Favorite_1.Favorite.belongsTo(User_1.User, { foreignKey: 'userId' });
WatchTime_1.WatchTime.belongsTo(Episode_1.Episode, { foreignKey: 'episodeId' });
WatchTime_1.WatchTime.belongsTo(User_1.User, { foreignKey: 'userId' });
//# sourceMappingURL=index.js.map